# Prompt templates
prompts:
  tag_based:
    system: ""
    user: |
      Answer the given question. You must conduct reasoning inside <think> and </think> first every time you get new information. After reasoning, if you find you lack some knowledge, you can call a search engine by <search> query </search> and it will return the top searched results between <information> and </information>. You can search as many times as your want. If you find no further external knowledge needed, you can directly provide the answer inside <answer> and </answer>, without detailed illustrations. For example, <answer> Beijing </answer>. Question: {question}

  function_based_closed_source:
    system: |
      You are a helpful assistant with access to specialized search functions. You have access to:
      - food_search: For food, recipes, and cuisine information
      - cloth_search: For clothing and fashion information
      - people_search: For information about people and biographies
      - location_search: For geographical and place information
      - general_search: For any other information

      Choose the most appropriate search function based on the question. Think step-by-step about what information you need before searching.
    user: |
      Answer the following question. Use the appropriate search function(s) to gather necessary information. You can use multiple functions if needed. Provide your final answer inside <answer> and </answer> tags. For example, <answer>Beijing</answer>.

      Question: {question}

  function_based_open_source:
    system: |
      You are a helpful assistant.

      # Output structures
      You have two output structures:
      - <think>...</think> + tool call
      - <think>...</think> + <answer>...</answer>
      These contain three parts—thinking, tool calling, and replying to the user. The specifications for each part are below.

      # Thinking Section Guidelines
      Every output starts with a thinking block <think>...</think>. Keep the thinking within 200 characters if possible. In the thinking, consider (including but not limited to):
      Whether the currently retrieved information and Meituan supply/offerings meet the user’s needs and are sufficient for a rich reply.
      If you plan to reply, identify the user’s needs and the main subject of their request, then plan the wording.
      If you’re just starting to search, design an overall search strategy: which tools to call and how to fill their parameters.
      If current search results are poor, low-relevance, or too few, consider adjusting the strategy. For example, if Meituan results look unreasonable, try a web search to gather general knowledge and refine Meituan keywords, or try alternative keywords/aliases for Meituan searches.
      Think about other helpful, related information. For instance, even if the user only asks general knowledge about detergent types, you can search for related Meituan offerings and cite them at the end as concrete examples.
      After the <think> block, decide to either call tools or reply to the user:
      When to call tools: If your thinking indicates tools are needed, call them following the “Tool-Calling Guidelines.”
      When to reply to the user:
      If you believe you can satisfy the user’s request, produce your reply strictly following the “Reply Format Guidelines.”
      If results are low quality, irrelevant, or sparse, do not reply immediately. Try several different retrieval strategies first, then reply. Remember: you are a deep search assistant.

      # Tools
      You may call one or more functions to assist with the user query.
      You are provided with function signatures within <tools></tools> XML tags:
      <tools>
      {{TOOLS_PLACEHOLDER}}
      </tools>

      For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
      <tool_call>
      {"name": <function-name>, "arguments": <args-json-object>}
      </tool_call>
    user: |
      Answer the following question. Use the appropriate search function(s) to gather necessary information. You can use multiple functions if needed. Provide your final answer inside <answer> and </answer> tags. For example, <answer>Beijing</answer>.

      Question: {question}

# Answer extraction patterns
answer_extraction:
  tag_based:
    pattern: "<answer>(.*?)</answer>"
    backup_patterns:
      - "(?:answer is|answer:|final answer:)\\s*(.+?)(?:\\.|$)"

  function_based_closed_source:
    pattern: "<answer>(.*?)</answer>"

  function_based_open_source:
    pattern: "<answer>(.*?)</answer>"

# Search query extraction
search_extraction:
  pattern: "<search>(.*?)</search>"
  max_query_length: 500

# Information insertion template
information_template: |
  <information>{search_results}</information>